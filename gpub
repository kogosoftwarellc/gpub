#!/bin/bash

set -e

SCRIPT_DIR=$(dirname $(readlink -f ${BASH_SOURCE[0]}))

function checkout_pristine_synced() {
  clean_working_copy
  git checkout "$1"
  clean_working_copy
  git pull origin "$1"
}

function clean_working_copy() {
  git clean -fd
}

function clear_dir() {
  for file in `ls -a`;do
    if [[ "$file" != '.git' && "$file" != '.' && "$file" != '..' ]];then
      rm -rf $file
    fi
  done
}

function get_args() {
  while [[ $# > 1 ]];do
    key="$1"
    case $key in
      --repo-dir)
        pushd "$2"
        REPO_DIR="$(readlink -f "$2")"
        popd
        shift
        shift
        ;;
      --src-branch)
        SRC_BRANCH="$2"
        shift
        shift
        ;;
      --dist-branch)
        DIST_BRANCH="$2"
        shift
        shift
        ;;
      *)
        shift
        ;;
    esac
  done
}

function help() {
  echo
  cat "$SCRIPT_DIR/README.md"
  exit $1
}

function validate_repo_dir() {
  if [[ -z "$REPO_DIR" ]]; then
    echo "--repo-dir is a required argument and must resolve to a directory!"
  fi

  if [ ! -d "$REPO_DIR" ]; then
    echo "--repo-dir did not resolve to a directory!  $REPO_DIR was given."
    help 1
  fi
}

function verify_branch_exists() {
  branchExists="`git rev-parse --verify "$1" > /dev/null 2>&1 || echo no`"

  if [ "$branchExists" == 'no' ]; then
    echo "$1 was not a branch in $REPO_DIR"
    help 1
  fi
}

## arg defaults
REPO_DIR=''
SRC_BRANCH='master'
DIST_BRANCH='gh-pages'

get_args $@

validate_repo_dir

cd "$REPO_DIR"

verify_branch_exists "$SRC_BRANCH"
verify_branch_exists "$DIST_BRANCH"

TMP_DIR="/tmp/github-pages$REPO_DIR"

rm -rf "$TMP_DIR"
mkdir -p "$TMP_DIR"

echo "Current directory: $PWD"
echo "Temp directory: $TMP_DIR"

checkout_pristine_synced "$SRC_BRANCH"

npm install

npm run-script build

mv dist "${TMP_DIR}"

mv node_modules "${TMP_DIR}"

checkout_pristine_synced "$DIST_BRANCH"

clear_dir

cp -R "${TMP_DIR}/dist/"* .

if [ -n "`git status --porcelain`" ];then
  git add -A .
  git commit -m updates
  
  git push origin "$DIST_BRANCH"
else
  echo 'No updates need to be made!'
fi

git checkout "$SRC_BRANCH"

mv "${TMP_DIR}/node_modules" .
